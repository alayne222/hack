#!/usr/bin/env python3
import sys
import json
import textwrap

from kubernetes import client, config
from kubernetes.client.rest import ApiException


def analyze_context(kubeconfig_path, context):
    try:
        result = {
            "valid": False,
            "server": None,
            "user": context.get("context", {}).get("user"),
            "namespace": context.get("context", {}).get("namespace"),
        }

        api_client = config.new_client_from_config(
            config_file=kubeconfig_path,
            context=context["name"],
        )
        result["server"] = api_client.configuration.host

        v1 = client.CoreV1Api(api_client)
        ns = context.get("context", {}).get("namespace", "default")
        secrets = v1.list_namespaced_secret(ns)
        result["valid"] = True
        result["secrets"] = [s.metadata.name for s in secrets.items]
    except ApiException as e:
        return {
            "valid": False,
            "error": textwrap.shorten(str(e), width=128, placeholder="..."),
        }
    except Exception as e:
        return {
            "valid": False,
            "error": "Connection Failed",
        }

    return result


def analyze(kubeconfig_path):
    """
    Analyzes a kubeconfig file to validate credentials and assess permissions
    for all contexts defined within it.
    """
    result = {"valid": False, "analysis": {}}

    contexts, active_context = config.list_kube_config_contexts(
        config_file=kubeconfig_path
    )

    if not contexts:
        return {
            "valid": False,
            "analysis": {"error": "no contexts found in kubeconfig"},
        }

    for context in contexts:
        context_result = analyze_context(kubeconfig_path, context)
        result["analysis"][context["name"]] = context_result

        if context_result["valid"]:
            result["valid"] = True

    return result


if __name__ == "__main__":
    if len(sys.argv) != 2:
        print(f"Usage: {sys.argv[0]} <path-to-kubeconfig-file>", file=sys.stderr)
        sys.exit(1)

    kubeconfig_file = sys.argv[1]
    print(json.dumps(analyze(kubeconfig_file), indent=2))
