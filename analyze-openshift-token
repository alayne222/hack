#! /usr/bin/env python3

import sys
import json
import requests


def analyze_openshift_token(host, token):
    headers = {"Authorization": f"Bearer {token}"}

    api_url = f"https://{host}/apis/user.openshift.io/v1/users/~"
    analysis = {}
    valid = False

    try:
        response = requests.get(api_url, headers=headers, timeout=15)

        if response.status_code == 200:
            valid = True
            user_info = response.json()
            analysis["username"] = user_info.get("metadata", {}).get("name")
            analysis["uid"] = user_info.get("metadata", {}).get("uid")
            analysis["groups"] = user_info.get("groups")
        elif response.status_code == 401:
            analysis["error"] = "Invalid or expired token"
        elif response.status_code == 403:
            analysis["error"] = (
                "Token valid, but insufficient permissions for this API call"
            )
            # Technically valid, but we might not get much info to assess risk.
            # Consider attempting a different, more basic API call if this occurs.
            valid = True  # Mark as valid as the token itself is not rejected
        else:
            analysis["error"] = f"Unexpected status code: {response.status_code}"
            analysis["response_body"] = response.text[:500]  # First 500 chars
    except requests.exceptions.RequestException as e:
        analysis["error"] = str(e)

    result = {"valid": valid, "analysis": analysis}
    print(json.dumps(result, indent=2))


if __name__ == "__main__":
    if len(sys.argv) != 3:
        print("USAGE:\n\tanalyse-openshift-token <hostname> <token>")
        sys.exit(1)

    hostname = sys.argv[1]
    token_value = sys.argv[2]
    analyze_openshift_token(hostname, token_value)
