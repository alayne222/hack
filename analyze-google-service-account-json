#!/usr/bin/env python3
import json
import sys
import os

from google.oauth2 import service_account
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError


__doc__ = f"""
USAGE
    {os.path.basename(__file__)} <path-to-service-account-key-file>

DESCRIPTION

    This script validates a Google Cloud service account key and attempts to list
    projects it has access to.
"""


def error(message, **kwargs):
    return {"message": message, **kwargs}


def analyze(key_file_path):
    results = {
        "valid": False,
        "analysis": {},
    }

    try:
        credentials = service_account.Credentials.from_service_account_file(
            key_file_path
        )
        results["analysis"]["service_account_email"] = credentials.service_account_email

        try:
            service = build("cloudresourcemanager", "v1", credentials=credentials)
            request = service.projects().list()
            response = request.execute()
            projects = [
                project["projectId"] for project in response.get("projects", [])
            ]
            results["analysis"]["accessible_projects"] = projects
            results["valid"] = True
        except HttpError as e:
            results["analysis"]["api_error"] = str(e)
            if e.resp.status == 403:
                results["analysis"]["status"] = "Permission Denied"
                results["valid"] = True  # Key is valid, but lacks permissions
            else:
                results["analysis"]["status"] = f"API Error: {e.resp.status}"

    except Exception as e:
        results["error"] = error(f"service account key validation failed: {e}")

    return results


if __name__ == "__main__":
    if len(sys.argv) != 2:
        print(__doc__)
        sys.exit(1)

    key_file_path = sys.argv[1]
    output = analyze(key_file_path)
    print(json.dumps(output, indent=2))
