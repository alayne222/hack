#!/usr/bin/env python3
import base64
import binascii
import json
import sys

import boto3

from botocore.exceptions import ClientError


def decode_key(access_key_id):
    trimmed_access_key_id = access_key_id[4:]  # remove KeyID prefix
    x = base64.b32decode(trimmed_access_key_id)
    y = x[0:6]
    z = int.from_bytes(y, byteorder="big", signed=False)

    mask = int.from_bytes(
        binascii.unhexlify(b"7fffffffff80"),
        byteorder="big",
        signed=False,
    )

    return (z & mask) >> 7


def analize(access_key_id, secret_access_key):
    """
    Analyzes an AWS keypair to validate it and check its permissions.
    """
    results = {
        "valid": False,
        "analysis": {
            "decoded_key": decode_key(access_key_id),
        },
    }

    try:
        session = boto3.Session(
            aws_access_key_id=access_key_id,
            aws_secret_access_key=secret_access_key,
        )
        current_region = session.region_name
        if not current_region:
            # Fallback region if none is configured
            current_region = "us-east-1"

        # 1. Validate the key and get caller identity
        sts_client = session.client("sts")
        identity = sts_client.get_caller_identity()
        identity.pop("ResponseMetadata", None)
        results["valid"] = True
        results["analysis"]["identity"] = identity

        # 2. Simulate principal policy to check permissions
        iam_client = session.client("iam")
        actions_to_test = [
            "iam:ListUsers",
            "iam:CreateUser",
            "iam:AttachUserPolicy",
            "s3:ListAllMyBuckets",
            "s3:GetObject",
            "s3:PutObject",
            "s3:DeleteObject",
            "ec2:DescribeInstances",
            "ec2:RunInstances",
            "ec2:TerminateInstances",
            "sts:AssumeRole",
        ]

        sim_results = iam_client.simulate_principal_policy(
            PolicySourceArn=identity["Arn"], ActionNames=actions_to_test
        )

        permissions = {
            r["EvalActionName"]: r["EvalDecision"]
            for r in sim_results["EvaluationResults"]
        }
        results["analysis"]["permissions"] = permissions
    except ClientError as e:
        results["analysis"]["error"] = {
            "code": e.response["Error"]["Code"],
            "message": e.response["Error"]["Message"],
        }
        # If the token is invalid, the key is considered "not valid" for access.
        if e.response["Error"]["Code"] == "InvalidClientTokenId":
            results["valid"] = False
        else:
            # For other errors (e.g., SignatureDoesNotMatch), the key might be
            # malformed but we can't be certain it's invalid.
            results["valid"] = "indeterminate"

    except Exception as e:
        results["analysis"]["error"] = {"message": str(e)}

    return results


if __name__ == "__main__":
    if len(sys.argv) != 3:
        print(
            f"USAGE:\n\t{sys.argv[0]} <aws-access-key-id> <aws-secret-access-key>",
            file=sys.stderr,
        )
        sys.exit(1)

    access_key = sys.argv[1]
    secret_key = sys.argv[2]

    analysis_results = analize(access_key, secret_key)
    print(json.dumps(analysis_results, indent=2))
