#!/usr/bin/env python3

import json
import os
import re
import sys

keywords = {
    "$1$",
    "$2a$",
    "$2b$",
    "$2x$",
    "$2y$",
    "$5$",
    "$6$",
    "$7$",
    "$gy$",
    "$md5",
    "$y$",
    "-----begin",
    "--token",
    "-us",
    ".tines.com/webhook/",
    "5hdxromc5jb20vii",
    "://",
    '"auths',
    "_auth",
    "_password",
    "a3t",
    "abia",
    "acca",
    "access_token$production$",
    "agpa",
    "aida",
    "aipa",
    "aiza",
    "akia",
    "anpa",
    "anva",
    "aroa",
    "asia",
    "authorization",
    "aws",
    "c2vzc2lvbjpyb2xllwfue",
    "c2vzc2lvbjpyb2xlo",
    "client_secret",
    "clientsecret",
    "controlled",
    "crudjtibpuevou1niifbssv",
    "cui",
    "define",
    "dropbox",
    "dt0eaacedeose0cbafacebook",
    "f3c19hy2nlc3nfa2v5x2lk",
    "ftkqgt1bftlntscbquklw",
    "gho_",
    "ghp_",
    "ghr_",
    "ghs_",
    "ghu_",
    "github_pat_",
    "glpat-",
    "glptt-",
    "glrt-",
    "gr1348941",
    "hd3nfywnjzxnzx2tlev9pz",
    "heroku",
    "hf_",
    "hooks.slack.com",
    "iaxnzijoiahr0chm6ly9zdgfja3jvec5pby9qd3qi",
    "iaxnzijoiyxjnb2nki",
    "ic3viijoic3lzdgvtonnlcnzpy2vhy2nvdw50o",
    "imf1zci6innub3dmbgfrzs",
    "imlzcyi6imfyz29jzc",
    "imlzcyi6imh0dhbzoi8vc3rhy2tyb3guaw8vand0i",
    "inn1yii6inn5c3rlbtpzzxj2awnlywnjb3vudd",
    "iyxvkijoic25vd2zsywtli",
    "jfr0loie9qru5tu0ggufjjv",
    "jhdwqioijzbm93zmxha2ug",
    "jpc3mioijhcmdvy2qi",
    "jpc3mioijodhrwczovl3n0ywnrcm94lmlvl2p3dc",
    "jzdwiioijzexn0zw06c2vydmljzwfjy291bnq6",
    "k_live_",
    "key",
    "key-",
    "label_studio_api_key",
    "lmf1dggwlmnvbs8il",
    "mailgun",
    "nlc3npb246cm9szs1hbn",
    "nlc3npb246cm9szt",
    "npm_",
    "password",
    "password",
    "password",
    "password",
    "pypi-ageichlwas5vcmc",
    "qkvhsu4gt1bftlntscbquklw",
    "ru5eie9qru5tu0ggufjjv",
    "secret",
    "secret",
    "secret",
    "secret",
    "secret_id",
    "sg.",
    "sha256~",
    "shpat_",
    "shpca_",
    "shppa_",
    "shpss_",
    "sk",
    "sk_live_",
    "sl.",
    "sl.u.",
    "sonar",
    "sq0atp-",
    "sq0csp-",
    "t3blbkfj",
    "testing_farm_api_token",
    "token",
    "token",
    "token",
    "token",
    "uyxv0adauy29tlyis",
    "vorcbpuevou1niifbssv",
    "wgdyb3fy",
    "xapp-",
    "xoxa-",
    "xoxb-",
    "xoxb-",
    "xoxe-",
    "xoxe-",
    "xoxe.xoxb-",
    "xoxe.xoxp-",
    "xoxo-",
    "xoxp-",
    "xoxr-",
    "xoxs-",
    "yxdzx2fjy2vzc19rzxlfaw",
    "zzxnzaw9uonjvbgu6",
    "zzxnzaw9uonjvbgutyw55",
}

stopwords = {
    "***",
    "...",
    "/etc/",
    "/run/",
    "/var/",
    "1234",
    "AIzaSyA65lEHUEizIsNtlbNo-l2K18dT680nsaM",
    "_key",
    "abc123",
    "abcd",
    "abcdef",
    "admin",
    "ansible",
    "auth",
    "base",
    "bearer",
    "bool",
    "bucket",
    "candlepin",
    "categories",
    "cert",
    "change",
    "client",
    "conf",
    "cont",
    "cred",
    "curl",
    "data",
    "default",
    "demo",
    "dissem",
    "django",
    "enter",
    "entry",
    "environ",
    "everyone",
    "example",
    "fake",
    "fwefnuexf",
    "get",
    "gitops",
    "hash",
    "header",
    "here",
    "insert",
    "invalid",
    "java",
    "json",
    "keylime",
    "legftcgxl",
    "local",
    "localhost",
    "login",
    "manager",
    "name",
    "newseveryone",
    "oauth-basic",
    "opens",
    "openshift",
    "openstack",
    "passp",
    "passw",
    "path",
    "pbench",
    "place",
    "placeholder",
    "postgres",
    "principal",
    "prisma",
    "private",
    "profile",
    "provide",
    "quickstart",
    "rabbitmq",
    "redhat",
    "registry",
    "replace",
    "required",
    "resource",
    "role",
    "rvhbtvbmr",
    "sample",
    "schema",
    "secret",
    "serv",
    "slack",
    "snip",
    "some",
    "spec",
    "string",
    "telemetry",
    "test",
    "theblurstoftimes",
    "todo",
    "token",
    "update",
    "user",
    "userpass",
    "uuid",
    "v4yw1wbg",
    "value",
    "vyqu1qte",
    "xxx",
    "xxxxx",
    "your",
    "zxhhbxbsz",
}


def iter_to_re(xs, *args):
    return re.compile("|".join(map(re.escape, set(xs))), *args)


with open("/usr/share/dict/words", encoding="UTF-8") as words_file:
    dictwords = set()
    for word in words_file:
        word = word.strip()
        dictwords.add(word.lower())
        dictwords.add(word.upper())
        dictwords.add(word.capitalize())


keywords_pattern = iter_to_re(keywords, re.IGNORECASE)
stopwords_pattern = iter_to_re(stopwords, re.IGNORECASE)
dictwords_pattern = iter_to_re(dictwords)


def get_finding(path, line_start, col_start, line_end, col_end):
    if not os.path.exists(path):
        print(f"Error: File not found at '{path}'")
        return ""

    finding = []
    try:
        with open(path, "r", encoding="utf-8") as f:
            lines = f.readlines()

            line_start_idx = line_start - 1
            col_start_idx = col_start - 1
            line_end_idx = line_end - 1
            col_end_idx = col_end - 1

            if not (
                0 <= line_start_idx < len(lines) and 0 <= line_end_idx < len(lines)
            ):
                print("Error: Line numbers are out of bounds")
                return ""

            if line_start_idx > line_end_idx:
                print("Error: Line numbers are out of bounds.")
                return ""
            elif line_start_idx == line_end_idx and col_start_idx > col_end_idx:
                print(
                    "Error: Start column cannot be greater than end column on the same line."
                )
                return ""

            finding_line = ""
            for i in range(line_start_idx, line_end_idx + 1):
                curr_line = lines[i].rstrip("\n")
                finding_line = finding_line + curr_line
                start_col = 0
                end_col = len(curr_line)

                if i == line_start_idx:
                    start_col = col_start_idx
                if i == line_end_idx:
                    end_col = col_end_idx
                if not (
                    0 <= start_col <= len(curr_line) and 0 <= end_col <= len(curr_line)
                ):
                    print(f"Error: Column numbers are out of bounds for line {i+1}.")
                    return ""

                if start_col > end_col:
                    print(
                        f"Warning: Adjusted start column ({start_col+1}) is greater than adjusted end column ({end_col+1}) on line {i+1}. This might result in an empty string for this segment."
                    )
                    finding.append("")
                    continue

                finding.append(curr_line[start_col:end_col])

        return "".join(finding), finding_line

    except Exception as e:
        print(f"An error occurred: {e}")
        return ""


def search_str(s):
    has_keyword = bool(keywords_pattern.search(s))
    has_stopword = bool(stopwords_pattern.search(s))
    has_consecutive = False
    has_repeating = False

    if re.search(r"(.)\1\1", s):
        has_repeating = True

    s = s.lower()
    size = len(s)

    for i in range(size - 2):
        c1 = s[i]
        c2 = s[i + 1]
        c3 = s[i + 2]

        if c1.isalpha() and c2.isalpha() and c3.isalpha():
            if ord(c2) == ord(c1) + 1 and ord(c3) == ord(c1) + 2:
                has_consecutive = True
                break

        elif c1.isdigit() and c2.isdigit() and c3.isdigit():
            if int(c2) == int(c1) + 1 and int(c3) == int(c1) + 2:
                has_consecutive = True
                break

    return has_keyword, has_stopword, has_consecutive, has_repeating


def search_line(line):
    return search_str(line)


def search_finding(finding):
    has_keyword, has_stopword, has_consecutive, has_repeating = search_str(finding)
    has_dictword = bool(dictwords_pattern.search(finding))

    total_special = 0
    total_numbers = 0

    for char in finding:
        if not (char.isalnum() or char.isspace()):
            total_special += 1
        elif "0" <= char <= "9":
            total_numbers += 1

    has_number = total_numbers > 0

    return (
        has_keyword,
        has_stopword,
        has_consecutive,
        has_repeating,
        has_dictword,
        has_number,
        total_numbers,
        total_special,
    )


if __name__ == "__main__":
    extraction = {
        "path": sys.argv[1],
        "line_start": int(sys.argv[2]),
        "column_start": int(sys.argv[3]),
        "line_end": int(sys.argv[4]),
        "column_end": int(sys.argv[5]),
    }
    (
        extraction["finding"],
        extraction["line"],
    ) = get_finding(
        extraction["path"],
        extraction["line_start"],
        extraction["column_start"],
        extraction["line_end"],
        extraction["column_end"],
    )
    (
        extraction["line_has_keyword"],
        extraction["line_has_stopword"],
        extraction["line_has_consecutive"],
        extraction["line_has_repeating"],
    ) = search_line(extraction["line"])
    (
        extraction["finding_has_keyword"],
        extraction["finding_has_stopword"],
        extraction["finding_has_consecutive"],
        extraction["finding_has_repeating"],
        extraction["finding_has_dictword"],
        extraction["finding_has_number"],
        extraction["finding_total_numbers"],
        extraction["finding_total_special"],
    ) = search_finding(extraction["finding"])

    print(json.dumps(extraction))
