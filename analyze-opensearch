#! /usr/bin/env python3

import sys
import requests
import json


def analyze_opensearch(host, username, password):
    try:
        response = requests.get(
            f"{host}/_cluster/health", auth=(username, password), timeout=5
        )

        response.raise_for_status()
        health_data = response.json()
        is_valid = True
        analysis = {
            "cluster_name": health_data.get("cluster_name"),
            "status": health_data.get("status"),
            "number_of_nodes": health_data.get("number_of_nodes"),
            "active_primary_shards": health_data.get("active_primary_shards"),
            "active_shards": health_data.get("active_shards"),
        }

        # Attempt to list indices
        indices_response = requests.get(
            f"{host}/_cat/indices?format=json", auth=(username, password), timeout=5
        )
        if indices_response.status_code == 200:
            indices_data = indices_response.json()
            analysis["indices"] = [idx.get("index") for idx in indices_data]
        else:
            analysis["indices_error"] = (
                f"Failed to retrieve indices, status: {indices_response.status_code}"
            )

    except requests.exceptions.HTTPError as http_err:
        is_valid = False
        analysis = {
            "error": str(http_err),
            "status_code": response.status_code if "response" in locals() else "N/A",
        }
        if response.status_code == 401 or response.status_code == 403:
            analysis["reason"] = "Authentication failed (Unauthorized or Forbidden)"
        else:
            analysis["reason"] = "HTTP error"
    except requests.exceptions.RequestException as req_err:
        is_valid = False
        analysis = {
            "error": str(req_err),
            "reason": "Request exception (e.g., connection error, timeout)",
        }
    except Exception as e:
        is_valid = False
        analysis = {"error": str(e), "reason": "An unexpected error occurred"}

    print(json.dumps({"valid": is_valid, "analysis": analysis}, indent=2))


if __name__ == "__main__":
    if len(sys.argv) != 4:
        print("Usage: python analyze-opensearch <host_url> <username> <password>")
        sys.exit(1)

    host_url = sys.argv[1]
    username = sys.argv[2]
    password = sys.argv[3]

    analyze_opensearch(host_url, username, password)
