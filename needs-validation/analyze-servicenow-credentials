#!/usr/bin/env python3
import base64
import json
import os
import sys
from http import HTTPStatus

import requests

__doc__ = f"""
USAGE
    {os.path.basename(__file__)} <instance> <username> <password>

DESCRIPTION

    Validates ServiceNow credentials by attempting to fetch the current user's
    information via the REST API. The instance should be the full domain,
    e.g., "my-company.service-now.com".
"""


def error(message, **kwargs):
    return {"message": message, **kwargs}


def analyze(instance, username, password):
    """
    Attempts to authenticate to the ServiceNow REST API.
    """
    results = {"valid": False, "analysis": {}}
    url = f"https://{instance}/api/now/ui/user/current_user"

    try:
        resp = requests.get(url, auth=(username, password), headers={"Accept": "application/json"})
        results["analysis"]["status_code"] = resp.status_code

        try:
            results["analysis"]["status"] = HTTPStatus(resp.status_code).phrase
        except ValueError:
            results["analysis"]["status"] = "Unknown"

        if resp.status_code == 200:
            results["valid"] = True
            try:
                # The actual user info is nested under 'result'
                results["analysis"]["user"] = resp.json().get("result")
            except json.JSONDecodeError:
                results["error"] = error("failed to decode JSON response")
        elif resp.status_code == 401:
            # Valid credentials would return 200, so 401 means they are invalid.
            # We still set valid to False.
            results["valid"] = False
            results["analysis"]["error"] = "Invalid credentials (401 Unauthorized)"
        else:
            raw = resp.text
            if len(raw) > 256:
                raw = raw[:253] + "..."
            results["analysis"]["raw"] = raw
            results["error"] = error("unexpected response", code=resp.status_code)

    except requests.exceptions.RequestException as e:
        results["error"] = error(f"request failed: {e}")

    return results


if __name__ == "__main__":
    if len(sys.argv) != 4:
        print(__doc__, file=sys.stderr)
        sys.exit(1)

    instance, username, password = sys.argv[1:4]

    results = analyze(instance, username, password)

    print(json.dumps(results, indent=2))
