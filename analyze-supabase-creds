#!/usr/bin/env python3
import base64
import json
import sys

import requests


def truncate(obj):
    if isinstance(obj, dict):
        return {key: truncate(value) for key, value in obj.items()}
    elif isinstance(obj, list):
        return list(map(truncate, obj))
    elif isinstance(obj, str):
        if len(obj) > 128:
            return f"{obj[:125]}..."
        return obj
    else:
        return obj


def is_jwt(s):
    return s.startswith("ey") and len(s.split(".")) == 3


def decode_jwt_part(part_str):
    try:
        padding = "=" * (4 - (len(part_str) % 4))
        decoded_bytes = base64.urlsafe_b64decode(part_str + padding)
        decoded_str = decoded_bytes.decode("utf-8")
        return json.loads(decoded_str)
    except Exception as e:
        print(f"Error decoding JWT part: {e}", file=sys.stderr)
        return None


def analyze(url, key):
    """
    Analyzes a Supabase credential by attempting to list database tables.
    """
    headers = {"apikey": key, "Authorization": f"Bearer {key}"}
    result = {"valid": False, "analysis": {}}
    res = requests.get(f"{url}/rest/v1/", headers=headers)

    if is_jwt(key):
        result["analysis"]["key_details"] = decode_jwt_part(key.split(".")[1])

    if res.status_code != 200:
        result["analysis"]["error"] = res.text
        return result

    try:
        data = res.json()
        result["analysis"]["tables"] = {}
        result["valid"] = True
        tables = list(data.get("definitions", {}).keys())

        for table in tables:
            # Add a limit to the query to get the first 10 rows
            table_res = requests.get(f"{url}/rest/v1/{table}?limit=10", headers=headers)
            if table_res.status_code == 200:
                result["analysis"]["tables"][table] = truncate(table_res.json())
            else:
                result["analysis"]["tables"][table] = {
                    "error": f"failed to fetch with status: table={table} status={table_res.status_code}"
                }

        return result
    except requests.exceptions.JSONDecodeError:
        result["valid"] = False
        result["analysis"]["error"] = "failed to decode JSON response"
        return result


if __name__ == "__main__":
    if len(sys.argv) != 3:
        print(f"Usage: {sys.argv[0]} <supabase_url> <supabase_key>")
        sys.exit(1)

    results = analyze(sys.argv[1], sys.argv[2])
    print(json.dumps(results, indent=2))
