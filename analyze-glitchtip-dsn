#!/usr/bin/env python3
import json
import os
import sys

import requests

__doc__ = f"""
USAGE
    {os.path.basename(__file__)} <dsn-url>

DESCRIPTION
    Analyzes a GlitchTip DSN by attempting to submit a test event.
"""


def error(message, **kwargs):
    return {"message": message, **kwargs}


def analyze(dsn_url):
    results = {
        "valid": False,
        "analysis": {},
    }

    # Extract project ID and host from DSN
    try:
        parts = dsn_url.split("/")
        project_id = parts[-1]
        host = "/".join(parts[2:-1])
        public_key = parts[2].split("@")[0]
        results["analysis"]["project_id"] = project_id
        results["analysis"]["host"] = host
        results["analysis"]["public_key"] = (
            public_key.split(":")[0] if ":" in public_key else public_key
        )
    except IndexError:
        results["error"] = error("Invalid DSN format")
        return results

    # Construct a minimal Sentry event payload
    test_event = {
        "event_id": "00000000000000000000000000000001",
        "timestamp": "2023-01-01T12:00:00Z",
        "message": "GlitchTip DSN validation test event",
        "level": "info",
        "platform": "analyze-glitchtip-dns",
    }

    # The Sentry/GlitchTip ingest endpoint for events
    # The URL structure is typically: {DSN_HOST}/api/{PROJECT_ID}/store/
    ingest_url = f"https://{host}/api/{project_id}/store/"

    headers = {
        "Content-Type": "application/json",
        "X-Sentry-Auth": (
            f"Sentry sentry_version=7, "
            f"sentry_client=analyze-glitchtip/1.0, "
            f"sentry_key={public_key.split(':')[0] if ':' in public_key else public_key}"
        ),
    }
    if ":" in public_key:  # If there's a secret key
        headers["X-Sentry-Auth"] += f", sentry_secret={public_key.split(':')[1]}"

    try:
        resp = requests.post(ingest_url, headers=headers, json=test_event, timeout=5)
        results["analysis"]["status_code"] = resp.status_code
        results["analysis"]["response"] = resp.text

        if resp.status_code == 200:
            results["valid"] = True
            results["analysis"]["message"] = "Test event submitted successfully."
        elif resp.status_code == 401:
            results["valid"] = False
            results["analysis"]["message"] = "Invalid DSN or project ID (Unauthorized)."
        elif resp.status_code == 403:
            results["valid"] = False
            results["analysis"][
                "message"
            ] = "Forbidden (e.g., rate-limited, project disabled)."
        else:
            results["analysis"][
                "message"
            ] = f"Unexpected response status: {resp.status_code}"
            results["error"] = error(
                "unexpected response", code=resp.status_code, raw=resp.text
            )

    except requests.exceptions.RequestException as e:
        results["error"] = error(f"request failed: {e}")

    return results


if __name__ == "__main__":
    if len(sys.argv) != 2:
        print(__doc__)
        sys.exit(1)

    dsn_url = sys.argv[1]
    analysis_results = analyze(dsn_url)
    print(json.dumps(analysis_results, indent=2))
