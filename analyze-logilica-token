#! /usr/bin/env python3
import sys
import json
import requests
import urllib.parse


def analyze_logilica_token(domain, token):
    """
    Validates a Logilica API token and domain by making a GET request
    to the /api/query/load endpoint with a simple query payload.
    """
    analysis_result = {"valid": False, "analysis": {}}
    base_url = "https://logilica.io/api/query/load"

    # Define the query payload as a dictionary
    query_payload = {
        "measures": ["JiraIssueDetail.avgLeadTime"],
        "dimensions": [],
        "filters": [],
        "timeDimensions": [],
    }

    # Convert the dictionary to a JSON string
    query_json = json.dumps(query_payload)

    # URL-encode the JSON string to be used as a query parameter
    params = {"query": query_json}

    headers = {
        "X-lgca-token": token,
        "x-lgca-domain": domain,
        "Accept": "application/json",  # Assuming JSON response is preferred
    }

    try:
        response = requests.get(base_url, headers=headers, params=params, timeout=10)

        if response.status_code == 200:
            analysis_result["valid"] = True
            try:
                analysis_result["analysis"] = response.json()
            except json.JSONDecodeError:
                analysis_result["analysis"][
                    "message"
                ] = "Token/Domain valid, but response was not valid JSON."
            except Exception as e:
                analysis_result["analysis"][
                    "message"
                ] = f"Token/Domain valid, error parsing response: {e}"

        elif response.status_code in [401, 403]:
            analysis_result["valid"] = False
            analysis_result["analysis"][
                "error"
            ] = f"HTTP Status {response.status_code} - Unauthorized/Forbidden"
            try:
                analysis_result["analysis"][
                    "details"
                ] = response.json()  # Include error details if available
            except:
                analysis_result["analysis"]["details"] = response.text[
                    :200
                ]  # Log beginning of text response

        else:
            analysis_result["valid"] = (
                False  # Treat unexpected codes as invalid for triage
            )
            analysis_result["analysis"][
                "error"
            ] = f"Unexpected HTTP Status {response.status_code}"
            try:
                analysis_result["analysis"]["details"] = response.json()
            except:
                analysis_result["analysis"]["details"] = response.text[:200]

    except requests.exceptions.RequestException as e:
        analysis_result["valid"] = False
        analysis_result["analysis"]["error"] = f"Request failed: {e}"
    except Exception as e:
        analysis_result["valid"] = False
        analysis_result["analysis"]["error"] = str(e)

    return json.dumps(analysis_result, indent=2)


if __name__ == "__main__":
    if len(sys.argv) != 3:
        print(f"USAGE:\n\tanalyze-logilica-token <logilica_domain> <logilica_token>")
        sys.exit(1)

    logilica_domain = sys.argv[1]
    api_token = sys.argv[2]
    result = analyze_logilica_token(logilica_domain, api_token)
    print(result)
