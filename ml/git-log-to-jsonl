#!/usr/bin/env python3

import os
import sys
import git
import json
import shutil
from pathlib import Path


def decode_bytes(data: bytes) -> str:
    """
    Attempts to decode bytes using a list of common encodings.
    """
    encodings_to_try = [
        "utf-8",
        "latin-1",
        "iso-8859-1",
        "cp1252",
        "ascii",
    ]

    for encoding in encodings_to_try:
        try:
            return data.decode(encoding)
        except UnicodeDecodeError:
            continue

    # If all else fails, use a replacement handler to avoid crashing
    return data.decode("utf-8", errors="replace")


def get_git_log_as_jsonl(repo_path: str):
    """
    Opens a local git repository, converts its log to a JSONL file.
    """
    repo_dir = Path(repo_path)

    # Check if the path is a valid git repository
    if not (repo_dir / ".git").exists():
        print(f"Error: '{repo_path}' is not a valid git repository.")
        return False

    print(f"Opening repository at {repo_path}...")
    try:
        repo = git.Repo(repo_path)
    except git.exc.InvalidGitRepositoryError:
        print(f"Error: Path '{repo_path}' does not contain a valid git repository.")
        return False

    print("Generating JSONL file...")

    try:

        for commit in repo.iter_commits("HEAD"):
            commit_id = commit.hexsha
            message = decode_bytes(commit.message.strip().encode())

            # Handling diffs for the first commit vs. subsequent commits
            if commit.parents:
                diffs = commit.diff(commit.parents[0], create_patch=True)
            else:
                diffs = commit.diff(None, create_patch=True)

            for diff in diffs:
                patch_text = decode_bytes(diff.diff)
                # Use a_path or b_path depending on if the file was added/deleted
                file_path = diff.a_path if diff.a_path else diff.b_path

                if file_path:
                    commit_data = {
                        "id": commit_id,
                        "patch": patch_text,
                        "path": file_path,
                        "author": {
                            "name": commit.author.name,
                            "email": commit.author.email,
                            "date": commit.authored_datetime.isoformat(),
                        },
                        "committer": {
                            "name": commit.committer.name,
                            "email": commit.committer.email,
                            "date": commit.committed_datetime.isoformat(),
                        },
                        "message": message,
                    }
                    print(json.dumps(commit_data, ensure_ascii=False) + "\n")

    except Exception as e:
        print(f"An unexpected error occurred: {e}")
        return False
    return True


if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("Usage: python3 <script_name>.py <local_repo_path>")
        sys.exit(1)

    repo_path = sys.argv[1]

    get_git_log_as_jsonl(repo_path)
